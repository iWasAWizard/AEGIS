# presets/verified_flow.yaml
name: "Verified Agent Flow (Ollama Backend)"
description: "An advanced agent that verifies outcomes using Ollama. If verification fails, it remediates."
state_type: "aegis.agents.task_state.TaskState"
entrypoint: "plan"

nodes:
  - id: "plan"
    tool: "reflect_and_plan"
  - id: "execute"
    tool: "execute_tool"
  - id: "verify" # Node that runs verify_outcome(state) -> returns {"history": ...}
    tool: "verify_outcome" 
  # "router" node is REMOVED. route_after_verification is used as a pure conditional function.
  - id: "remediate"
    tool: "remediate_plan"
  - id: "summarize"
    tool: "summarize_result"

edges:
  - ["plan", "execute"]
  - ["execute", "verify"] # After execute, go to verify node
  # Conditional edges will branch from "verify" node, using route_after_verification function
  - ["remediate", "execute"] 
  - ["summarize", "__end__"]

# Conditional decision is made AFTER the "verify" node (which runs verify_outcome).
# The routing logic itself is the route_after_verification function.
condition_node: "verify" 
condition_map:
  remediate_plan: "remediate" 
  continue: "plan"            
  end: "summarize"            

runtime:
  llm_backend_type: "ollama"
  llm_model_name: "ollama-mistral-default"
  ollama_api_url: "http://ollama:11434/api/generate"
  koboldcpp_api_url: null
  llm_planning_timeout: 300
  temperature: 0.2
  max_context_length: 8192
  max_tokens_to_generate: 1536
  top_p: 0.9
  top_k: 40
  repetition_penalty: 1.1
  safe_mode: true
  tool_timeout: 60
  tool_retries: 0
  iterations: 10