# aegis/agents/plan_output.py
"""
Pydantic schema for the agent's structured "scratchpad" for a single step.

This model defines the structured output expected from the planning LLM call.
It represents the agent's complete thought process for one iteration, including
its reasoning, the tool it chose, and the arguments for that tool.
"""

from typing import Dict, Any, Optional

from pydantic import BaseModel, Field


class AgentScratchpad(BaseModel):
    """A structured model to hold the agent's thought and action for a single step.

    This serves as the "working memory" for one cycle of the agent loop. An instance
    of this model is generated by the planner and then executed by the tool runner.

    :ivar thought: A detailed, multi-sentence explanation from the LLM about its reasoning.
                   This includes analyzing the current state and justifying the chosen tool.
    :ivar tool_name: The name of the tool selected for execution in this step.
    :ivar tool_args: A dictionary of arguments to be passed to the selected tool. This
                     must conform to the tool's Pydantic input model.
    :ivar verification_tool_name: An optional tool to run to verify the main action's success.
    :ivar verification_tool_args: Arguments for the verification tool.
    """

    thought: str = Field(
        ...,
        description="The agent's reasoning process for choosing the current action.",
    )
    tool_name: str = Field(..., description="The name of the tool to be executed.")
    tool_args: Dict[str, Any] = Field(
        default_factory=dict, description="The arguments to pass to the selected tool."
    )
    verification_tool_name: Optional[str] = Field(
        None, description="Optional tool to verify the main action's success."
    )
    verification_tool_args: Optional[Dict[str, Any]] = Field(
        None, description="Optional arguments for the verification tool."
    )
