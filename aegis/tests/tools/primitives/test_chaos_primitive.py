# aegis/tests/tools/test_primitive_chaostest_primitive_chaos.py
"""
Property-based tests for the chaos tools using Hypothesis.
"""
import uuid

from hypothesis import given, strategies as st

from aegis.tools.primitives.chaos import (
    RandomStringInput,
    random_string,
    RandomNumberInput,
    random_number,
    UUIDInput,
    generate_uuid,
)


@given(st.integers(min_value=1, max_value=200))
def test_random_string_length(length):
    """Verify random_string always returns a string of the requested length."""
    result = random_string(RandomStringInput(length=length))
    assert isinstance(result, str)
    assert len(result) == length


@given(charset=st.sampled_from(["ascii", "hex", "digits", "alphanum", "emoji"]))
def test_random_string_charsets(charset):
    """Verify random_string works with all specified character sets."""
    result = random_string(RandomStringInput(length=50, charset=charset))
    assert len(result) == 50


@given(
    min_val=st.floats(min_value=-1e5, max_value=1e5),
    max_val=st.floats(min_value=-1e5, max_value=1e5),
)
def test_random_number_range(min_val, max_val):
    """Verify random_number always returns a value within the specified range."""
    # Ensure min_val is less than or equal to max_val for a valid range
    if min_val > max_val:
        min_val, max_val = max_val, min_val

    result = random_number(RandomNumberInput(min_value=min_val, max_value=max_val))
    assert isinstance(result, float)
    assert min_val <= result <= max_val


def test_generate_uuid_v4():
    """Verify that a valid UUIDv4 is generated by default."""
    result = generate_uuid(UUIDInput())
    try:
        uuid.UUID(result, version=4)
    except ValueError:
        assert False, f"'{result}' is not a valid UUIDv4"


def test_generate_uuid_v5():
    """Verify that a valid UUIDv5 is generated when a namespace is provided."""
    result = generate_uuid(UUIDInput(namespace="aegis.test"))
    try:
        val = uuid.UUID(result, version=5)
        # Check that it's derived from the correct namespace
        assert val.variant == uuid.RFC_4122
    except ValueError:
        assert False, f"'{result}' is not a valid UUIDv5"
