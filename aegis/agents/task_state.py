# aegis/agents/task_state.py
"""
Defines the core `TaskState` and related data structures for agent execution.

This module contains the primary Pydantic model that is passed between nodes
in the LangGraph execution graph. It is designed to be a structured, auditable
record of the agent's entire workflow.
"""

import time
from typing import List, Any, Optional, Literal

from pydantic import BaseModel, Field

from aegis.schemas.plan_output import AgentScratchpad
from aegis.schemas.runtime import RuntimeExecutionConfig
from aegis.utils.logger import setup_logger

logger = setup_logger(__name__)


class HistoryEntry(BaseModel):
    """A structured record of a single step in the agent's execution history.

    :ivar plan: The AgentScratchpad (thought and action) for the step.
    :vartype plan: AgentScratchpad
    :ivar observation: The output or result from the executed tool.
    :vartype observation: Any
    :ivar status: The final status of the step, either 'success' or 'failure'.
    :vartype status: Literal["success", "failure"]
    :ivar verification_status: The outcome of the verification step, if any.
    :vartype verification_status: Optional[Literal["success", "failure"]]
    :ivar start_time: The Unix timestamp when the step started execution.
    :vartype start_time: float
    :ivar end_time: The Unix timestamp when the step finished execution.
    :vartype end_time: float
    :ivar duration_ms: The duration of the step in milliseconds.
    :vartype duration_ms: float
    """

    plan: AgentScratchpad
    observation: Any
    status: Literal["success", "failure"]
    verification_status: Optional[Literal["success", "failure"]] = None
    start_time: float = Field(default_factory=time.time)
    end_time: float = Field(default_factory=time.time)
    duration_ms: float = 0.0


class TaskState(BaseModel):
    """Tracks the complete runtime state for an agent task.

    This object is the central data structure for the agent. It is initialized
    at the start of a task and updated by each node in the graph. Its final
    form represents the complete, auditable record of the agent's execution.

    :ivar task_id: A unique identifier for the task run.
    :ivar task_prompt: The original, high-level prompt from the user.
    :ivar runtime: The runtime execution configuration for this task.
    :ivar latest_plan: The most recent plan generated by `reflect_and_plan`.
    :ivar history: A chronological list of structured `HistoryEntry` objects.
    :ivar final_summary: A string containing the final, human-readable summary.
    """

    task_id: str
    task_prompt: str
    runtime: RuntimeExecutionConfig

    latest_plan: Optional[AgentScratchpad] = None
    history: List[HistoryEntry] = Field(default_factory=list)
    final_summary: Optional[str] = None

    @property
    def steps_taken(self) -> int:
        """Calculates the number of steps taken based on the history length.

        :return: The number of completed agent steps.
        :rtype: int
        """
        num_steps = len(self.history)
        logger.debug(f"Accessed steps_taken: {num_steps}")
        return num_steps
