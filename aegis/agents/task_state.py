# aegis/agents/task_state.py
"""
Defines the core `TaskState` data structure for agent execution.

This module contains the primary Pydantic model that is passed between nodes
in the LangGraph execution graph. It is designed to be a structured, auditable
record of the agent's entire workflow.
"""

from typing import List, Any, Tuple, Optional

from pydantic import BaseModel, Field

from aegis.agents.plan_output import AgentScratchpad
from aegis.schemas.runtime import RuntimeExecutionConfig


class TaskState(BaseModel):
    """Tracks the complete runtime state for an agent task.

    This object is the central data structure for the agent. It is initialized
    at the start of a task and updated by each node in the graph. Its final
    form represents the complete, auditable record of the agent's execution.

    :ivar task_id: A unique identifier for the task run.
    :ivar task_prompt: The original, high-level prompt from the user.
    :ivar runtime: The runtime execution configuration for this task.
    :ivar latest_plan: The most recent plan generated by the `reflect_and_plan` step.
                       This is a temporary holder before it's moved into the history.
    :ivar history: A chronological list of (plan, result) tuples, representing
                   the agent's execution history.
    :ivar final_summary: A string containing the final, human-readable summary
                         of the task's outcome, generated at the end of the run.
    """

    task_id: str
    task_prompt: str
    runtime: RuntimeExecutionConfig

    latest_plan: Optional[AgentScratchpad] = None
    history: List[Tuple[AgentScratchpad, Any]] = Field(default_factory=list)
    final_summary: Optional[str] = None

    @property
    def steps_taken(self) -> int:
        """Calculates the number of steps taken based on the history length.

        :return: The number of completed agent steps.
        """
        return len(self.history)
