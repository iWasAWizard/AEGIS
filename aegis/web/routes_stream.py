# aegis/web/log_streamer.py
"""
Manages WebSocket connections and provides a logging handler to stream
logs to connected UI clients.
"""
import asyncio
import logging
from typing import List

from fastapi import APIRouter, WebSocket, WebSocketDisconnect

from aegis.utils.logger import setup_logger

logger = setup_logger(__name__)
router = APIRouter()

# This list holds all active WebSocket connections.
connected_clients: List[WebSocket] = []


async def broadcast_log(message: str):
    """Broadcasts a log message to all connected WebSocket clients.

    :param message: The log message string to send.
    :type message: str
    """
    logger.debug(f"Broadcasting log message to {len(connected_clients)} clients.")
    # Create a task for each client to send the message concurrently.
    tasks = [client.send_text(message) for client in connected_clients]
    await asyncio.gather(*tasks, return_exceptions=True)


@router.websocket("/ws/logs")
async def websocket_logs_endpoint(websocket: WebSocket):
    """The FastAPI endpoint that clients connect to for receiving logs.

    :param websocket: The incoming WebSocket connection.
    :type websocket: WebSocket
    """
    await websocket.accept()
    connected_clients.append(websocket)
    logger.info(f"New WebSocket client connected to log stream. Total clients: {len(connected_clients)}")
    try:
        # Keep the connection alive, waiting for messages (we don't expect any).
        while True:
            await websocket.receive_text()
    except WebSocketDisconnect:
        logger.info("WebSocket client disconnected.")
    except Exception as e:
        logger.error(f"An unexpected error occurred in the WebSocket connection: {e}")
    finally:
        if websocket in connected_clients:
            connected_clients.remove(websocket)
        logger.info(f"WebSocket client removed. Total clients: {len(connected_clients)}")


class WebSocketLogHandler(logging.Handler):
    """A custom logging handler that broadcasts log records to WebSocket clients."""

    def __init__(self):
        super().__init__()
        from aegis.utils.logger import ColorFormatter
        self.setFormatter(ColorFormatter())

    def emit(self, record: logging.LogRecord):
        """Formats the log record and broadcasts it.

        :param record: The log record to process.
        :type record: logging.LogRecord
        """
        # This check prevents logs generated by this module from causing a loop.
        if "log_streamer" in record.name:
            return

        try:
            msg = self.format(record)
            # We need to run the async broadcast function in the event loop.
            asyncio.create_task(broadcast_log(msg))
        except RuntimeError:
            # This can happen if the event loop isn't running.
            pass
